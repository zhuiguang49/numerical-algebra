import numpy as np
from qrdecomposition import least_squares

# 硬编码房产数据集（来自原始数据表）
数据矩阵 = np.array([
    [4.9176, 1, 3.472, 0.998, 1, 7, 4, 42, 3, 1, 0, 25.9],
    [5.0208, 1, 3.531, 1.5, 2, 7, 4, 62, 1, 1, 0, 29.5],
    [4.5429, 1, 2.275, 1.175, 1, 6, 3, 40, 2, 1, 0, 27.9],
    [4.5573, 1, 4.05, 1.232, 1, 6, 3, 54, 4, 1, 0, 25.9],
    [5.0597, 1, 4.455, 1.121, 1, 6, 3, 42, 3, 1, 0, 29.9],
    [3.891, 1, 4.455, 0.988, 1, 6, 3, 56, 2, 1, 0, 29.9],
    [5.898, 1, 5.85, 1.24, 1, 7, 3, 51, 2, 1, 1, 30.9],
    [5.6039, 1, 9.52, 1.501, 0, 6, 3, 32, 1, 1, 0, 28.9],
    [15.4202, 2.5, 9.8, 3.42, 2, 10, 5, 42, 2, 1, 1, 84.9],
    [14.4598, 2.5, 12.8, 3, 2, 9, 5, 14, 4, 1, 1, 82.9],
    [5.8282, 1, 6.435, 1.225, 2, 6, 3, 32, 1, 1, 0, 35.9],
    [5.3003, 1, 4.9883, 1.552, 1, 6, 3, 30, 1, 2, 0, 31.5],
    [6.2712, 1, 5.52, 0.975, 1, 5, 2, 30, 1, 2, 0, 31.0],
    [5.9592, 1, 6.666, 1.121, 2, 6, 3, 32, 2, 1, 0, 30.9],
    [5.05, 1, 5, 1.02, 0, 5, 2, 46, 4, 1, 1, 30.0],
    [5.6039, 1, 9.52, 1.501, 0, 6, 3, 32, 1, 1, 0, 28.9],
    [8.2462, 1.5, 5.15, 1.664, 2, 8, 4, 50, 4, 1, 0, 36.9],
    [6.6969, 1.5, 6.092, 1.488, 1.5, 7, 3, 22, 1, 1, 1, 41.9],
    [7.7841, 1.5, 7.102, 1.376, 1, 6, 3, 17, 2, 1, 0, 40.5],
    [9.0384, 1, 7.8, 1.5, 1.5, 7, 3, 23, 3, 3, 0, 43.9],
    [5.9894, 1, 5.52, 1.256, 2, 6, 3, 40, 4, 1, 1, 37.5],
    [7.5422, 1.5, 4, 1.69, 1, 6, 3, 22, 1, 1, 0, 37.9],
    [8.7951, 1.5, 9.89, 1.82, 2, 8, 4, 50, 1, 1, 1, 44.5],
    [6.0931, 1.5, 6.7265, 1.652, 1, 6, 3, 44, 4, 1, 0, 37.9],
    [8.3607, 1.5, 9.15, 1.777, 2, 8, 4, 48, 1, 1, 1, 38.9],
    [8.14, 1, 8, 1.504, 2, 7, 3, 3, 1, 3, 0, 36.9],
    [9.1416, 1.5, 7.3262, 1.831, 1.5, 8, 4, 31, 4, 1, 0, 45.8],
    [12, 1.5, 5, 1.2, 2, 6, 3, 30, 3, 1, 1, 41.0]
])

def load_data():
    """ 硬编码数据加载 """
    X = 数据矩阵[:, :-1]  # 前11列特征
    b = 数据矩阵[:, -1]   # 最后一列为房价
    A = np.column_stack([np.ones(X.shape[0]), X])  # 添加截距项
    return A, b

def estimate_parameters(A, b):
    """ 执行最小二乘估计 """
    theta = least_squares(A, b)
    return theta

def analyze_results(theta, A, b):
    """ 分析拟合结果 """
    residuals = b - A @ theta
    residual_norm = np.linalg.norm(residuals)
    R_squared = 1 - (residual_norm**2) / np.var(b) / len(b)

    print("\n=== 模型诊断 ===")
    print(f"残差范数: {residual_norm:.4f}")
    print(f"确定系数R²: {R_squared:.4f}")
    print("参数估计值:")
    print(f"截距项(x0): {theta[0]:.2f}")
    for i, name in enumerate(['房产税', '浴室数量', '占地面积', '居住面积', '车库数量',
                             '房屋数量', '居室数量', '房龄', '建筑类型', '户型', '壁炉数量']):
        print(f"{name}(a{i+1}): {theta[i+1]:.4f}")

if __name__ == "__main__":
    A, b = load_data()
    theta = estimate_parameters(A, b)
    analyze_results(theta, A, b)